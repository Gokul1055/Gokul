Show databases;
CREATE DATABASE IPL;
USE IPL;
CREATE TABLE matches(
   id              INTEGER  NOT NULL PRIMARY KEY ,
   season          INTEGER  NOT NULL,
   city            VARCHAR(50) NOT NULL,
   date            DATE NOT NULL,
   team1           VARCHAR(50) NOT NULL,
   team2           VARCHAR(50) NOT NULL,
   toss_winner     VARCHAR(50) NOT NULL,
   toss_decision   VARCHAR(20) NOT NULL,
   result          VARCHAR(15) NOT NULL,
   dl_applied      BIT  NOT NULL,
   winner          VARCHAR(50) NOT NULL,
   win_by_runs     INTEGER  NOT NULL,
   win_by_wickets  INTEGER  NOT NULL,
   player_of_match VARCHAR(30) NOT NULL,
   venue           VARCHAR(100) NOT NULL,
   umpire1         VARCHAR(40),
   umpire2         VARCHAR(25),
   umpire3         VARCHAR(60)
);

-- ALTER COMMAND--
ALTER TABLE `ipl`.`matches` 
CHANGE COLUMN `date` `date` VARCHAR(20) NOT NULL ;


ALTER TABLE `ipl`.`matches` 
CHANGE COLUMN `dl_applied` `dl_applied` INT NOT NULL ;


TRUNCATE TABLE MATCHES; 
SELECT *FROM MATCHES;
DESCRIBE MATCHES;


-- HOW TO CHECK ALL THE ROWS IMPORTED--
SELECT * FROM MATCHES;
SELECT COUNT(*)FROM MATCHES; # COUNT OF DISPLAYED & CROSS VERIFIY THE CSV FILE ROWS

CREATE TABLE deliveries(
   match_id         INTEGER  NOT NULL,
   inning           INTEGER  NOT NULL,
   batting_team     VARCHAR(50) NOT NULL,
   bowling_team     VARCHAR(50) NOT NULL,
   over_no             INTEGER  NOT NULL,
   ball             INTEGER  NOT NULL,
   batsman          VARCHAR(50) NOT NULL,
   non_striker      VARCHAR(50) NOT NULL,
   bowler           VARCHAR(30) NOT NULL,
   is_super_over_no    VARCHAR(20)  NOT NULL,
   wide_runs        INTEGER  NOT NULL,
   bye_runs         INTEGER  NOT NULL,
   legbye_runs      INTEGER  NOT NULL,
   noball_runs      INTEGER  NOT NULL,
   penalty_runs     INTEGER  NOT NULL,
   batsman_runs     INTEGER  NOT NULL,
   extra_runs       INTEGER  NOT NULL,
   total_runs       INTEGER  NOT NULL,
   player_dismissed VARCHAR(35),
   dismissal_kind   VARCHAR(17),
   fielder          VARCHAR(20)
);

SELECT COUNT(*)FROM DELIVERIES;
SELECT * FROM DELIVERIES;

#1. HOW MANY TIMES DID EACH TEAM WIN THE TOSS IN SEASON 2017 & ORDER BY ASCENDING ORDER?

SELECT SEASON,TOSS_WINNER,count(*) as TOSS_WINS
FROM matches WHERE SEASON = 2017
GROUP BY SEASON,TOSS_WINNER ORDER BY TOSS_WINS ASC;

#2. WHICH BATSMAN BEEN DISMISSED BY THE BOWLER ' YS CHAHAL' MOST TIME?

SELECT BATSMAN,COUNT(*) AS TOTAL_DISMISSIAL
FROM DELIVERIES 
WHERE PLAYER_DISMISSED IS NOT NULL 
AND BOWLER ='YS CHAHAL'
GROUP BY BATSMAN ORDER BY TOTAL_DISMISSIAL DESC
LIMIT 1;



#3. WHO ARE THE TOP 10 PLAYERS GOT PLAYER OF THE MATCH AWARDS

SELECT PLAYER_OF_MATCH,COUNT(*) AS MOST_VALUABLE_PLAYER
FROM MATCHES GROUP BY  PLAYER_OF_MATCH
ORDER BY MOST_VALUABLE_PLAYER DESC 
LIMIT 10;


#4. HOW MANY EXTRAS ( WIDES & NO- BALLS) WERE BOWLED BY RCB IN EACH MATCH?

SELECT M.ID AS MATCH_NO,D.BOWLING_TEAM,
SUM(D.EXTRA_RUNS) AS EXTRAS
FROM MATCHES AS M
JOIN DELIVERIES AS D ON D.MATCH_ID=M.ID
WHERE D.BOWLING_TEAM = 'ROYAL CHALLENGERS BANGALORE'
    AND D.EXTRA_RUNS > 0
GROUP BY M.ID,D.BOWLING_TEAM;

#5. WHICH BOWLER HAS THE  MOST WICKETS TAKEN IN A SINGLE MATCH?

SELECT M.ID AS MATCH_NO,D.BOWLER,COUNT(*) AS WICKETS_TAKEN
FROM MATCHES AS M
LEFT JOIN DELIVERIES AS D ON D.MATCH_ID = M.ID
WHERE D.PLAYER_DISMISSED IS NOT NULL
GROUP BY M.ID,D.BOWLER
ORDER BY WICKETS_TAKEN DESC
limit 1;

#6. WHAT IS THE HIGHEST AVERAGE NUMBER OF RUNS SCORED IN EACH OVER OF THE INNINGS IN EACH MATCH?

SELECT M.ID,D.INNING,D.OVER_NO,
AVG(D.TOTAL_RUNS) AS AVERAGE_RUNS_PER_OVER
FROM MATCHES AS M
LEFT JOIN DELIVERIES AS D ON D.MATCH_ID= M.ID
GROUP BY M.ID,D.INNING,D.OVER_NO
ORDER BY AVERAGE_RUNS_PER_OVER DESC
LIMIT 1;

#7. WHICH TEAM HAS THE HIGHEST 3 TOTAL SCORE IN A SINGLE MATCH?

SELECT M.SEASON,M.ID AS MATCH_NO, D.BATTING_TEAM,
SUM(D.TOTAL_RUNS) AS TOTAL_SCORE
FROM MATCHES AS M
JOIN DELIVERIES AS D ON D.MATCH_ID= M.ID
GROUP BY M.SEASON,M.ID,D.BATTING_TEAM
ORDER BY TOTAL_SCORE DESC
LIMIT 3;



#8. WHICH BATSMAN HAS SCORED THE MOST RUNS IN A SINGLE MATCH IN MUMBAI INDIANS?

SELECT M.SEASON,M.ID AS MATCH_NO,D.BATSMAN, SUM(D.BATSMAN_RUNS) AS TOTAL_RUNS
FROM MATCHES AS M
JOIN DELIVERIES AS D ON D.MATCH_ID = M.ID WHERE M.TEAM1 = 'MUMBAI INDIANS' OR M.TEAM2
    = 'MUMBAI INDIANS'
GROUP BY M.SEASON, M.ID, D.BATSMAN
ORDER BY TOTAL_RUNS DESC
LIMIT 1;


#9. WHAT IS THE AVERAGE PERCENTAGE OF BOUNDARIES AND SIXES HIT BY YUVARAJ SINGH?

SELECT BATSMAN, AVG
(
CASE 
WHEN BATSMAN_RUNS= 4 OR BATSMAN_RUNS = 6 THEN 1 
ELSE 0 
END
) * 100 AS average_boundaries
FROM DELIVERIES
WHERE BATSMAN = 'Yuvraj Singh';


#10. WHAT IS THE AVERAGE STRIKE RATE OF BATSMEN IN THE IPL DATASET?

SELECT AVG(STRIKE_RATE) AS AVERAGE_STRIKE_RATE
FROM ( SELECT BATSMAN, (SUM(TOTAL_RUNS)/COUNT(BALL))*100 AS STRIKE_RATE 
FROM DELIVERIES 
GROUP BY BATSMAN) AS BATSMAN_STATS;

#11. WHAT IS THE NUMBER OF MATCHES WON BY EACH TEAM BATTING FIRST VERSUS BATTING SEACOND USING STORE PROCEDURE?

DROP procedure IF EXISTS `WON`;

DELIMITER $$
USE `ipl`$$
CREATE PROCEDURE `MATCHES_WON` ()
BEGIN
select batting_first,count(*) as matches_won
from(
select case when win_by_runs>0 then team1
else team2
end as batting_first
from matches
where winner!="Tie") as batting_first_teams
group by batting_first;
END$$

CALL  `MATCHES_WON`();

#12. WHAT IS THE HIGHEST PARTNERSHIP RUNS FOR EACH TEAM IN EACH SEASON?


DELIMITER $$
USE `ipl`$$
CREATE PROCEDURE `partner`()
BEGIN
select season,batting_team,max(total_runs) as highest_partnership
from(select season,batting_team,partnership,sum(total_runs) as total_runs
from(select season,match_id,batting_team,over_no,
sum(batsman_runs) as partnership,sum(batsman_runs)+sum(extra_runs) as total_runs
from deliveries,matches where deliveries.match_id=matches.id
group by season,match_id,batting_team,over_no) as team_scores
group by season,batting_team,partnership) as highest_partnership
group by season,batting_team
ORDER BY highest_partnership desc;
END$$

DELIMITER ;

call partnership();

#13. CONCAT VENUE & CITY BY USING FUNCTION 

SELECT * FROM MATCHES;
SELECT * FROM DELIVERIES;

SELECT ID, SEASON, TEAM1, TEAM2,WINNER, PLAYER_OF_MATCH,GETVENUEADDRESS(ID) FROM MATCHES WHERE ID = 20;

USE `ipl`;
DROP function IF EXISTS `GETVENUEADDRESS`;

DELIMITER $$
USE `ipl`$$
CREATE FUNCTION `GETVENUEADDRESS`(SEASONID INTEGER) RETURNS varchar(200)
    DETERMINISTIC
BEGIN
DECLARE MATCHADDRESS VARCHAR(150);
SELECT CONCAT(VENUE,',', CITY) INTO MATCHADDRESS
FROM MATCHES
WHERE ID = SEASONID; 
RETURN MATCHADDRESS;
END$$

DELIMITER ;
;
